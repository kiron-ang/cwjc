# -*- coding: utf-8 -*-
"""rejected-report-analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e5wNT_CTLN_B5ZL2tkPytR-UxMUzLdjT
"""

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm

fm.fontManager.addfont('montserrat.ttf')
plt.rcParams['font.family'] = 'montserrat'

data = [5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        4, 5, 5, 5, 5, 5, 3, 5, 5, 5, 5, 5, 5, 5, 5, 4]

categories = sorted(set(data))
counts = [data.count(category) for category in categories]

plt.bar(categories, counts, color="#0064b6")
plt.xlabel("Overall CWJC Rating", color="#0064b6")
plt.ylabel("Number of Responses", color="#0064b6")
plt.xticks(categories, [str(category) for category in categories], color="#0064b6")
plt.yticks(color="#0064b6")
plt.grid(axis='y', color="#0064b6", linestyle='--', alpha=0.7)

ax = plt.gca()
ax.spines['top'].set_color("#ffffff")
ax.spines['bottom'].set_color("#0064b6")
ax.spines['left'].set_color("#0064b6")
ax.spines['right'].set_color("#ffffff")
ax.tick_params(axis='x', colors="#0064b6")
ax.tick_params(axis='y', colors="#0064b6")

plt.savefig("kiron-chart.png", dpi=600)

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import pandas as pd
import numpy as np

# Add font
fm.fontManager.addfont('montserrat.ttf')
plt.rcParams['font.family'] = 'montserrat'

# Process the data
class_times = ["Day Classes", "Evening Classes"]
class_types = ["Bible Study", "Math", "Personal Development Group",
               "Tutoring", "Case Management One-on-One Meetings",
               "Language Arts", "Science", "Mentoring", "Social Studies"]

# Create a dictionary to store counts
data = {class_type: [0, 0] for class_type in class_types}

# First column data
time_data = ["Day Classes"]*18 + ["Evening Classes"]*14

# Second column data
courses_data = [
    "Bible Study",
    "Bible Study, Math, Language Arts",
    "Bible Study, Personal Development Group, Case Management One-on-One Meetings",
    "Bible Study, Personal Development Group, Math",
    "Bible Study, Personal Development Group, Math",
    "Bible Study, Personal Development Group, Math",
    "Bible Study, Personal Development Group, Tutoring, Math",
    "Bible Study, Tutoring",
    "Case Management One-on-One Meetings, Tutoring, Math",
    "Math",
    "Personal Development Group",
    "Personal Development Group, Math",
    "Personal Development Group, Math, Language Arts",
    "Personal Development Group, Math, Language Arts",
    "Personal Development Group, Tutoring, Math",
    "Tutoring",
    "Tutoring, Math, Language Arts",
    "Tutoring, Math, Social Studies, Science, Language Arts",
    "Math",
    "Math",
    "Math",
    "Math",
    "Personal Development Group",
    "Science",
    "Math",
    "Personal Development Group",
    "Bible Study, Personal Development Group, Case Management One-on-One Meetings, Tutoring, Math",
    "Bible Study, Math",
    "Bible Study, Personal Development Group, Math",
    "Bible Study, Personal Development Group, Tutoring, Mentoring, Math, Science",
    "Personal Development Group, Case Management One-on-One Meetings, Math, Science",
    "Bible Study, Language Arts"
]

# Count occurrences
for i, courses in enumerate(courses_data):
    time_index = 0 if time_data[i] == "Day Classes" else 1
    course_list = [c.strip() for c in courses.split(",")]

    for course in course_list:
        if course in data:
            data[course][time_index] += 1

# Prepare data for plotting
df = pd.DataFrame(data, index=class_times)

# Set up the plot
fig, ax = plt.subplots(figsize=(12, 6))

# Set the width of each bar group
x = np.arange(len(class_types))
width = 0.35

# Plot bars
ax.bar(x - width/2, df.iloc[0], width, label='Day Classes', color="#0064b6")
ax.bar(x + width/2, df.iloc[1], width, label='Evening Classes', color="#4c91c8")

# Customize the plot
ax.set_xlabel("", color="#0064b6")
ax.set_ylabel("Number of Responses", color="#0064b6")
ax.set_xticks(x)
ax.set_xticklabels(class_types, rotation=45, ha='right', color="#0064b6")
ax.tick_params(axis='y', colors="#0064b6")
ax.grid(axis='y', color="#0064b6", linestyle='--', alpha=0.7)
ax.legend()
label_colors = ['#0064b6', '#4c91c8']  # Colors matching the bars
for text, color in zip(ax.legend().get_texts(), label_colors):
    text.set_color(color)

# Customize spines
ax.spines['top'].set_color("#ffffff")
ax.spines['bottom'].set_color("#0064b6")
ax.spines['left'].set_color("#0064b6")
ax.spines['right'].set_color("#ffffff")

plt.tight_layout()
plt.savefig("kiron-chart.png", dpi=600)

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import pandas as pd
import numpy as np

# Add font
fm.fontManager.addfont('montserrat.ttf')
plt.rcParams['font.family'] = 'montserrat'

# Process the data
class_times = ["Day Classes", "Evening Classes"]
rating_categories = [1, 2, 3, 4, 5]

# Create a dictionary to store counts
data = {rating: [0, 0] for rating in rating_categories}

# First column data
time_data = ["Day Classes"]*17 + ["Evening Classes"]*13

# Second column data
ratings_data = [5, 5, 5, 5, 5, 5, 5, 4, 3, 5, 5, 4, 3, 5, 1, 2, 5, 4, 2, 5, 5, 3, 5, 5, 4, 5, 5, 5, 5, 4]

# Count occurrences
for i, rating in enumerate(ratings_data):
   time_index = 0 if time_data[i] == "Day Classes" else 1
   data[rating][time_index] += 1

# Prepare data for plotting
df = pd.DataFrame(data, index=class_times)

# Set up the plot
fig, ax = plt.subplots(figsize=(12, 6))

# Set the width of each bar group
x = np.arange(len(rating_categories))
width = 0.35

# Plot bars
ax.bar(x - width/2, df.iloc[0], width, label='Day Classes', color="#0064b6")
ax.bar(x + width/2, df.iloc[1], width, label='Evening Classes', color="#4c91c8")

# Customize the plot
ax.set_xlabel("Bible Study Rating", color="#0064b6")
ax.set_ylabel("Number of Responses", color="#0064b6")
ax.set_xticks(x)
ax.set_xticklabels(rating_categories, color="#0064b6")
ax.tick_params(axis='y', colors="#0064b6")
ax.grid(axis='y', color="#0064b6", linestyle='--', alpha=0.7)
ax.legend()
label_colors = ['#0064b6', '#4c91c8']  # Colors matching the bars
for text, color in zip(ax.legend().get_texts(), label_colors):
    text.set_color(color)

# Customize spines
ax.spines['top'].set_color("#ffffff")
ax.spines['bottom'].set_color("#0064b6")
ax.spines['left'].set_color("#0064b6")
ax.spines['right'].set_color("#ffffff")

plt.tight_layout()
plt.savefig("kiron-chart.png", dpi=600)

import matplotlib.pyplot as plt
import matplotlib.font_manager as fm
import pandas as pd
import numpy as np

# Add font
fm.fontManager.addfont('montserrat.ttf')
plt.rcParams['font.family'] = 'montserrat'

# Process the data
class_times = ["Day Classes", "Evening Classes"]
rating_categories = ["I'm struggling", "Not so good", "Good", "Great"]

# Create a dictionary to store counts
data = {rating: [0, 0] for rating in rating_categories}

# First column data
time_data = ["Day Classes"]*17 + ["Evening Classes"]*13

# Second column data
ratings_data = ["I'm struggling", "Good", "Great", "Good", "Good", "Good", "Good",
                "Not so good", "Great", "I'm struggling", "Good", "Good", "Not so good",
                "Great", "Great", "Good", "Not so good", "Good", "Good", "Great",
                "Great", "Good", "Great", "Good", "Great", "Great", "Good", "Great",
                "Great", "Good"]

# Count occurrences
for i, rating in enumerate(ratings_data):
    time_index = 0 if time_data[i] == "Day Classes" else 1
    data[rating][time_index] += 1

# Prepare data for plotting
df = pd.DataFrame(data, index=class_times)

# Set up the plot
fig, ax = plt.subplots(figsize=(12, 6))

# Set the width of each bar group
x = np.arange(len(rating_categories))
width = 0.35

# Plot bars
ax.bar(x - width/2, df.iloc[0], width, label='Day Classes', color="#0064b6")
ax.bar(x + width/2, df.iloc[1], width, label='Evening Classes', color="#4c91c8")

# Customize the plot
ax.set_xlabel("Self-Reported Progress", color="#0064b6")
ax.set_ylabel("Number of Responses", color="#0064b6")
ax.set_xticks(x)
ax.set_xticklabels(rating_categories, color="#0064b6")
ax.tick_params(axis='y', colors="#0064b6")
ax.grid(axis='y', color="#0064b6", linestyle='--', alpha=0.7)
ax.legend()
label_colors = ['#0064b6', '#4c91c8']  # Colors matching the bars
for text, color in zip(ax.legend().get_texts(), label_colors):
    text.set_color(color)

# Customize spines
ax.spines['top'].set_color("#ffffff")
ax.spines['bottom'].set_color("#0064b6")
ax.spines['left'].set_color("#0064b6")
ax.spines['right'].set_color("#ffffff")

plt.tight_layout()
plt.savefig("kiron-chart.png", dpi=600)